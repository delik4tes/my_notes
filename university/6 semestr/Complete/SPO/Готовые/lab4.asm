; Женюх Александр А-07-19 ЛР4
; Вариант 6
; Удалить все концевые пробелы, Pascal-string

.model small		        ; один сегмент кода, данных и стека
.stack 100h			        ; отвести под стек 256 байт
.data	                  ; начало сегмента данных
  len   EQU 18

  msg1 	db 10, 'Inishal string:', 10,'$'
  msg2 	db 10, 10, 'Changed string:', 10, '$'

  stra  db  len, 'Hello, world!', 5 dup(' ')
  strb  db  19 dup(?)           ; преобразованный массив (без пробелов)

.code                   ; начало сегмента кода
start:
  mov ax, @data 
  mov ds, ax            ; настройка DS на начало сегмента данных  
  push ds             
  pop es                ; настройка ES на начало сегмента данных
  
  call OutputA

; нахождение первого символа, не являющимся пробелом, с конца
  std                   ; перебор в сторону уменьшения массива 
  mov di, offset stra+len   ; ES:DI <- stra+len настраиваем DI на конец строки
  mov cx, len           ; цикл на 18 повторений

  mov al, ' '           ; заносим в аккумулятор пробел для сравнения
  repe  scasb           ; проходим с конца по массиву пока пробелы, выходим когда встречаем не пробел

  mov bx, cx            ; сохраняем значение счетчика
  cld                   ; перебор в сторону увеличения массива
  mov si, offset stra   ; настраиваем источник
  mov di, offset strb   ; настраиваем приемник
  inc cx 
rep movsb               ; повторяем пересылку cx раз
  
 
  mov strb[0], bl       ; меняем рамер строки
  call OutputB
;----------------------------------------------------------------  

; выход из программы
  mov ah, 4ch 
  int 21h 

;----------------------------------------------------------------
  OutputA proc
  ; выведем изначальную строку, заключив ее в кавычки
    mov dx, offset msg1   
    mov ah, 09h
    int 21h               ; вывод сообщения 

    mov al,'"'            ; заносим в al открывающую кавычку
    int 29h               ; выводим открывающую кавычку

    cld                   ; перебор в сторону увеличения массива
    mov si, offset stra+1 ; DS:SI <- stra+1
    mov cx, len           ; цикл на 23 повторения

  _outputA:
    LODSB                 ; значение элемента массива(строки) из памяти заносится в AL
    int 29h               ; вывод одного символа
    loop _outputA

    mov al,'"'            ; заносим в al закрывающую кавычку
    int 29h               ; выводим закрывающую кавычку
    ret
  OutputA endp
;----------------------------------------------------------------

;----------------------------------------------------------------
  OutputB proc
    ; выведем строку, заключив ее в кавычки
    mov dx, offset msg2 
    mov ah, 09h
    int 21h               ; вывод сообщения 

    mov al,'"'            ; заносим в al открывающую кавычку
    int 29h               ; выводим открывающую кавычку

    cld                   ; перебор в сторону увеличения массива
    mov si, offset strb+1 ; DS:SI <- strb+1
    mov cl, strb[0]       ; цикл на 18 повторений

  _outputB:
    LODSB                 ; значение элемента массива(строки) из памяти заносится в AL
    int 29h               ; вывод одного символа
    loop _outputB

    mov al,'"'            ; заносим в al закрывающую кавычку
    int 29h               ; выводим закрывающую кавычку
    
    ret
  OutputB endp
;----------------------------------------------------------------
 
  end start